swagger: "2.0"

info:
  description: "madder core api"
  version: "1.0.0"
  title: "Madder Core API"

tags:
  - name: "component"
  - name: "effect"
  - name: "project"

paths:
  /component:
    get:
      tags:
      - component
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Component"
    post:
      tags:
      - component
      description: Create components
      parameters:
        - name: body
          in: body
          description: Component to be added
          required: true
          schema:
            $ref: "#/definitions/Component"
      responses:
        200:
          description: OK
  
  /component/{component_id}:
    parameters:
      - name: component_id
        in: path
        description: ID of component
        required: true
        type: integer

    get:
      tags:
      - component
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Component"
    delete:
      tags:
      - component
      description: Delete the specified component
      responses:
        200:
          description: OK

    patch:
      tags:
      - component
      description: Update (partial) elements of component
      parameters:
        - name: body
          in: body
          description: Value of component
          required: true
          schema:
            $ref: '#/definitions/Component'
      responses:
        200:
          description: OK

  /component/{component_id}/attribute/{key}:
    parameters:
      - name: component_id
        in: path
        description: ID of component
        required: true
        type: integer
      - name: key
        in: path
        description: name of attribute
        required: true
        type: string
    
    get:
      tags:
      - component
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/AnyValue'
    put:
      tags:
      - component
      parameters:
        - name: body
          in: body
          description: Value related to the key given in the path
          required: true
          schema:
            $ref: "#/definitions/Component"
      responses:
        200:
          description: OK
  
  /component/{component_id}/effect:
    parameters:
      - name: component_id
        in: path
        description: ID of component
        required: true
        type: integer

    get:
      tags:
      - effect
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Effect"
    post:
      tags:
      - effect
      responses:
        200:
          description: OK

  /component/{component_id}/effect/{index}:
    parameters:
      - name: component_id
        in: path
        description: ID of component
        required: true
        type: integer
      - name: index
        in: path
        description: index of effects
        required: true
        type: integer
    
    get:
      tags:
      - effect
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Effect"
    post:
      tags:
      - effect
      parameters:
      - name: body
        in: body
        description: New effect to be created
        required: true
        schema:
          $ref: "#/definitions/Effect"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Effect"

  /effect:
    get:
      tags:
      - effect
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Effect"

  /effect/{effect_id}:
    parameters:
      - name: effect_id
        in: path
        description: ID of effect
        required: true
        type: integer
    
    get:
      tags:
      - effect
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Effect"

  /effect/{effect_id}/intermeds:
    parameters:
      - name: effect_id
        in: path
        description: ID of effect
        required: true
        type: integer

    post:
      tags:
      - effect
      parameters:
      - name: body
        in: body
        description: EffectPoint to be created
        required: true
        schema:
          $ref: "#/definitions/EffectPoint"
      responses:
        200:
          description: OK

  /effect/{effect_id}/value/{time}:
    parameters:
      - name: effect_id
        in: path
        description: ID of effect
        required: true
        type: integer
      - name: time
        in: path
        description: specified time, in [0,1]
        required: true
        type: number
        
    get:
      tags:
      - effect
      responses:
        200:
          description: value at the specified time
          schema:
            type: number

  /project:
    get:
      tags:
      - project
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Project'
    patch:
      tags:
      - project
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Project'

  /project/yaml:
    get:
      tags:
      - project
      responses:
        200:
          description: OK
          schema:
            type: string
    put:
      tags:
      - project
      parameters:
      - name: body
        in: body
        description: yaml
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK

  /screen/{time}:
    parameters:
      - name: time
        in: path
        description: position of screen
        required: true
        type: number
  
    get:
      tags:
      - project
      responses:
        200:
          description: OK
          schema:
            type: string

definitions:
  Component:
    type: object
    properties:
      component_type:
        type: string
      start_time:
        type: integer
      length:
        type: integer
      attributes:
        type: object
      effect:
        type: array
        items:
          type: integer

  Effect:
    type: object
    properties:
      effect_type:
        type: string
      transition:
        enum:
          - Linear
          - Ease
          - EaseIn
          - EaseOut
          - EaseInOut
      start_value:
        type: number
      end_value:
        type: number
      intervals:
        type: array
        items:
          $ref: "#/definitions/EffectPoint"
  
  EffectPoint:
    type: object
    properties:
      transition:
        type: string
      position:
        type: number
      value:
        type: number

  Project:
    type: object
    properties:
      width:
        type: integer
      height:
        type: integer
      length:
        type: integer

  AnyValue: {}

